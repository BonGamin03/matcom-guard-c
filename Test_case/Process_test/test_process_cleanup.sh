#!/bin/bash

# Test para verificar limpieza de procesos fantasma
# Crea procesos, los mata y verifica que MatCom Guard los detecte como inactivos

echo "üëª INICIANDO TEST: Limpieza de Procesos Fantasma"
echo "üìã Descripci√≥n: Crea procesos, los mata y verifica limpieza en MatCom Guard"
echo "üéØ Resultado esperado: Procesos eliminados no deben aparecer como activos"
echo ""

# Array para almacenar PIDs de procesos de prueba
declare -a test_pids=()

# Funci√≥n para crear un proceso de prueba
create_test_process() {
    local name=$1
    local cpu_intensive=$2
    
    if [ "$cpu_intensive" = "true" ]; then
        # Proceso con uso intensivo de CPU
        bash -c "
            echo 'Proceso $name iniciado - PID: $$'
            while true; do
                for i in {1..10000}; do
                    result=\$((i * i))
                done
            done
        " &
    else
        # Proceso simple que solo espera
        bash -c "
            echo 'Proceso $name iniciado - PID: $$'
            while true; do
                sleep 1
            done
        " &
    fi
    
    local pid=$!
    test_pids+=($pid)
    echo "‚úÖ Proceso '$name' creado con PID: $pid"
    return $pid
}

# Funci√≥n para mostrar estado de procesos
show_process_status() {
    echo ""
    echo "üìä Estado actual de procesos de prueba:"
    echo "PID      Estado    Comando"
    echo "-------- --------- ----------------------------------------"
    
    for pid in "${test_pids[@]}"; do
        if kill -0 $pid 2>/dev/null; then
            cmd=$(ps -p $pid -o comm= 2>/dev/null || echo "N/A")
            echo "$pid    ACTIVO    $cmd"
        else
            echo "$pid    MUERTO    (proceso terminado)"
        fi
    done
    echo ""
}

echo "üöÄ Creando procesos de prueba..."
echo ""

# Crear varios procesos de prueba
create_test_process "test_normal" false
sleep 1
create_test_process "test_intensive" true
sleep 1
create_test_process "test_daemon" false
sleep 1

echo ""
echo "üìä Procesos de prueba creados:"
show_process_status

echo "‚è±Ô∏è  Esperando 10 segundos para que MatCom Guard los detecte..."
sleep 10

echo "üîç Verifica en MatCom Guard que estos procesos aparezcan en el reporte"
echo "üìù PIDs a buscar: ${test_pids[*]}"
echo ""
read -p "Presiona ENTER cuando hayas visto los procesos en MatCom Guard..."

echo ""
echo "üíÄ MATANDO PROCESOS DE PRUEBA..."
echo ""

# Matar procesos uno por uno
for i in "${!test_pids[@]}"; do
    pid=${test_pids[$i]}
    echo "üó°Ô∏è  Matando proceso PID: $pid"
    
    if kill -0 $pid 2>/dev/null; then
        kill -TERM $pid 2>/dev/null
        sleep 2
        
        # Si sigue vivo, usar SIGKILL
        if kill -0 $pid 2>/dev/null; then
            echo "   ‚öîÔ∏è  Usando SIGKILL para PID: $pid"
            kill -KILL $pid 2>/dev/null
        fi
        
        # Verificar que muri√≥
        sleep 1
        if kill -0 $pid 2>/dev/null; then
            echo "   ‚ùå ERROR: Proceso $pid sigue vivo"
        else
            echo "   ‚úÖ Proceso $pid terminado exitosamente"
        fi
    else
        echo "   ‚ö†Ô∏è  Proceso $pid ya estaba muerto"
    fi
    
    echo "   ‚è±Ô∏è  Esperando 5 segundos antes del siguiente..."
    sleep 5
done

echo ""
echo "üìä Estado final de procesos:"
show_process_status

echo "üîç INSTRUCCIONES PARA VERIFICAR EL TEST:"
echo ""
echo "1. Observa la salida de MatCom Guard en las pr√≥ximas iteraciones"
echo "2. Los PIDs ${test_pids[*]} NO deber√≠an aparecer m√°s en el reporte"
echo "3. Si aparecen, significa que hay un problema en la limpieza de procesos"
echo "4. El contador de 'procesos activos' deber√≠a haber disminuido"
echo ""
echo "‚è±Ô∏è  Esperando 30 segundos para que MatCom Guard actualice..."
sleep 30

echo ""
echo "‚úÖ TEST COMPLETADO"
echo "üìã Resultado esperado:"
echo "   - Los procesos con PIDs ${test_pids[*]} NO deben aparecer en el reporte"
echo "   - El total de procesos activos debe haber disminuido"
echo "   - No debe haber alertas para procesos inexistentes"
echo ""
echo "üîç Verifica estos puntos en la salida de MatCom Guard"